1. 变量名不加美元符号（$，PHP语言中变量需要），如：
	your_name="runoob.com"
   注意，变量名和等号之间不能有空格
	首个字符必须为字母（a-z，A-Z）。
	中间不能有空格，可以使用下划线（_）。
	不能使用标点符号。
	不能使用bash里的关键字（可用help命令查看保留关键字）。

2. 使用变量:
	your_name="qinjx"
	echo $your_name
	echo ${your_name}	推荐给所有变量加上花括号，这是个好的编程习惯。
   已定义的变量，可以被重新定义:
	your_name="tom"
	echo $your_name
	your_name="alibaba"
	echo $your_name

3. 只读变量readonly 
	下面的例子尝试更改只读变量，结果报错：
	#!/bin/bash
	myUrl="http://www.w3cschool.cc"
	readonly myUrl
	myUrl="http://www.runoob.com"

4. 删除变量 unset 
   	变量被删除后不能再次使用。unset 命令不能删除只读变量。

5. 变量类型
	1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
	2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
	3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

6. Shell 字符串
	单引号
	str='this is a string'
		单引号字符串的限制：
		单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
		单引号字串中不能出现单引号（对单引号使用转义符后也不行）
	双引号
	your_name='qinjx'
	str="Hello, I know your are \"$your_name\"! \n"
		双引号的优点：
		双引号里可以有变量
		双引号里可以出现转义字符

7. 拼接字符串
	your_name="qinjx"
	greeting="hello, "$your_name" !"
	greeting_1="hello, ${your_name} !"
	echo $greeting $greeting_1

8. 获取字符串长度
	string="abcd"
	echo ${#string} #输出 4

9. 提取子字符串
	以下实例从字符串第 2 个字符开始截取 4 个字符：
	string="runoob is a great site"
	echo ${string:1:4} # 输出 unoo

`	var=http://www.aaa.com/123.htm
		1. # 号截取，删除左边字符，保留右边字符。
			echo ${var#*//}		#结果是 ：www.aaa.com/123.htm
		2. ## 号截取，删除左边字符，保留右边字符。
			echo ${var##*/}		#结果是 123.htm
		3. %号截取，删除右边字符，保留左边字符
			echo ${var%/*}		#结果是：http://www.aaa.com
		4. %% 号截取，删除右边字符，保留左边字符
			echo ${var%%/*}		#结果是：http:
		5. 从右边第几个字符开始，及字符的个数
			echo ${var:0-7:3}	#结果是 ：123
		8. 从右边第几个字符开始，一直到结束。
			echo ${var:0-7}		#结果是 ：123.htm

10. 查找子字符串
	查找字符 "i 或 s" 的位置：
		string="runoob is a great company"

		echo `expr index "$string" is`  # 输出 8
	注意： 以上脚本中 "`" 是反引号，而不是单引号 "'"，不要看错了哦

11. 数组
	bash支持一维数组（不支持多维数组），并且没有限定数组的大小。
	数组名=(值1 值2 ... 值n)：
		array_name=(value0 value1 value2 value3)
	or
		array_name[0]=value0
		array_name[1]=value1
		array_name[n]=valuen
	读取数组
		${数组名[下标]}
			valuen=${array_name[n]}
		使用@符号可以获取数组中的所有元素，例如：
			echo ${array_name[@]}
	获取数组的长度
		# 取得数组元素的个数
		length=${#array_name[@]}
		# 或者
		length=${#array_name[*]}
		# 取得数组单个元素的长度
		lengthn=${#array_name[n]}
